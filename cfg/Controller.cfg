#!/usr/bin/env python
PACKAGE = "ardrone_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# type_enum = gen.enum([ 
# 	gen.const("PID", 			int_t, 0, "A PID Controller"),
# 	gen.const("TrajectoryPID",	int_t, 1, "A Trajectory PID Controller"),
# 	gen.const("ZeroPoleGain",	int_t, 2, "A Zero Pole Gain Controller"), 
# 	gen.const("TransferFunction",	int_t, 3, "A Numerator Denominator Transfer Function Controller"),
# 	], "An enum to set Controller Type")
# gen.add("type", int_t, 0, "A controller parameter which is edited via an enum", 0, 0, 3, edit_method=type_enum)

gen.add("type", str_t, 0, "Controller Type: PID, TrajectoryPID, ZPK or TF ", "PID")

gen.add("direction", str_t, 0, "Controller Coordinate: 0, x, y, z, yaw ", "0")

gen.add("digital", bool_t, 0, "Digital or Continuous", False)

gen.add("Ts", double_t, 0, "Sampling Time", 0.05, 0.01, 1.00)

gen.add("proportional", double_t, 0, "Proportional Gain", 1.25, 0, 100)
gen.add("derivative", double_t, 0, "Derivative Gain", 3.62, 0, 100)
gen.add("integral", double_t, 0, "Integral Gain", 0.00, 0, 100)

gen.add("numerator", str_t, 0, "Proportional Gain", '1.12, 0.33, 1.15')
gen.add("denominator", str_t, 0, "Derivative Gain", '1.12, 0.33, 1.15')

gen.add("zeros", str_t, 0, "Zeros", '1.12, 0.33, 1.15')
gen.add("poles", str_t, 0, "Poles", '1.12, 0.33, 1.15')
gen.add("gain", double_t, 0, "Gain", 1.00, -100, 100)


exit(gen.generate(PACKAGE, "controller", "Controller"))